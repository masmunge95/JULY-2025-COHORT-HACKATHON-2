-- Create the user_profiles table
CREATE TABLE public.user_profiles (
  id uuid NOT NULL,
  first_name text NOT NULL,
  last_name text NOT NULL,
  display_name text NULL,
  avatar_url text NULL,
  updated_at timestamptz NULL DEFAULT now(),
  CONSTRAINT user_profiles_pkey PRIMARY KEY (id),
  CONSTRAINT user_profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- RLS policies for user_profiles
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can insert their own profile."
ON public.user_profiles
FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile."
ON public.user_profiles
FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can view their own profile."
ON public.user_profiles
FOR SELECT USING (auth.uid() = id);


-- Create the payments table
CREATE TABLE public.payments (
  id bigint generated by default as identity,
  user_id uuid NOT NULL,
  plan text NOT NULL, -- 'monthly', 'yearly', 'task'
  amount integer NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  status text NOT NULL, -- 'completed', 'pending', 'failed'
  CONSTRAINT payments_pkey PRIMARY KEY (id),
  CONSTRAINT payments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- RLS policies for payments
ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own payments."
ON public.payments
FOR SELECT USING (auth.uid() = user_id);